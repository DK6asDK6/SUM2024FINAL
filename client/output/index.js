var mainBundled=function(t){"use strict";function s(){const t=()=>{const t=new Date;return t.getMilliseconds/1e3+t.getSeconds()+60*t.getMinutes};return this.responce=(s=null)=>{let i=t();this.globalTime=i,this.globalDeltaTime=i-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=i-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=i-this.pauseTime-this.startTime),this.frameCounter++,i-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(i-this.oldTimeFPS),this.oldTimeFPS=i,this.frameCounter=0,null!=s&&(document.getElementById(s).innerHTML=this.getFPS())),this.oldTime=i},this.getFPS=()=>this.FPS.toFixed(3),this.globalTime=this.localTime=t(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}class i{constructor(t,s){this.name=s,this.index=t.rnd.gl.getUniformBlockIndex(t.prg,s),this.size=t.rnd.gl.getActiveUniformBlockParameter(t.prg,this.index,t.rnd.gl.UNIFORM_BLOCK_DATA_SIZE),this.bind=t.rnd.gl.getActiveUniformBlockParameter(t.prg,this.index,t.rnd.gl.UNIFORM_BLOCK_BINDING),this.buffer=t.rnd.gl.createBuffer(),this.shd=t,t.rnd.gl.bindBuffer(t.rnd.gl.UNIFORM_BUFFER,this.buffer),t.rnd.gl.bufferData(t.rnd.gl.UNIFORM_BUFFER,this.size,t.rnd.gl.DYNAMIC_DRAW),t.rnd.gl.bindBufferBase(t.rnd.gl.UNIFORM_BUFFER,this.bind,this.buffer)}update(t,s){this.shd.rnd.gl.bindBuffer(this.shd.rnd.gl.UNIFORM_BUFFER,this.buffer),this.shd.rnd.gl.bufferSubData(this.shd.rnd.gl.UNIFORM_BUFFER,t,s,0)}}function h(t,s){return new i(t,s)}class e{constructor(t,s){this.rnd=t,this.name=s,this.prg=null,this.attrs=[],this.uniforms=[],this._init(s)}async _init(t){this.shaders=[{id:null,type:this.rnd.gl.VERTEX_SHADER,name:"vert",src:""},{id:null,type:this.rnd.gl.FRAGMENT_SHADER,name:"frag",src:""}];for(const s of this.shaders){let i=await fetch(`bin/shaders/${t}/${s.name}.glsl`),h=await i.text();"string"==typeof h&&""!=h&&(s.src=h)}this.updateShadersSource()}updateShadersSource(){if(this.shaders[0].id=null,this.shaders[1].id=null,this.prg=null,""!=this.shaders[0].src&&""!=this.shaders[1].src){if(this.shaders.forEach((t=>{if(t.id=this.rnd.gl.createShader(t.type),this.rnd.gl.shaderSource(t.id,t.src),this.rnd.gl.compileShader(t.id),!this.rnd.gl.getShaderParameter(t.id,this.rnd.gl.COMPILE_STATUS)){let s=this.rnd.gl.getShaderInfoLog(t.id);console.log(`Shader ${this.name}/${t.name} compile fail: ${s}`)}})),this.prg=this.rnd.gl.createProgram(),this.shaders.forEach((t=>{null!=t.id&&this.rnd.gl.attachShader(this.prg,t.id)})),this.rnd.gl.linkProgram(this.prg),!this.rnd.gl.getProgramParameter(this.prg,this.rnd.gl.LINK_STATUS)){let t=this.rnd.gl.getProgramInfoLog(this.prg);console.log(`Shader program ${this.name} link fail: ${t}`)}this.updateShaderData()}}updateShaderData(){this.uniforms={};const t=this.rnd.gl.getProgramParameter(this.prg,this.rnd.gl.ACTIVE_UNIFORMS);for(let s=0;s<t;s++){const t=this.rnd.gl.getActiveUniform(this.prg,s);this.uniforms[t.name]={name:t.name,type:t.type,size:t.size,loc:this.rnd.gl.getUniformLocation(this.prg,t.name)}}this.attrs={};const s=this.rnd.gl.getProgramParameter(this.prg,this.rnd.gl.ACTIVE_ATTRIBUTES);for(let t=0;t<s;t++){const s=this.rnd.gl.getActiveAttrib(this.prg,t);this.attrs[s.name]={name:s.name,type:s.type,size:s.size,loc:this.rnd.gl.getAttribLocation(this.prg,s.name)}}this.uniformBlocks={};const i=this.rnd.gl.getProgramParameter(this.prg,this.rnd.gl.ACTIVE_UNIFORM_BLOCKS);for(let t=0;t<i;t++){const s=this.rnd.gl.getActiveUniformBlockName(this.prg,t);this.uniformBlocks[s]=h(this,s)}}apply(){return null!=this.prg&&(this.rnd.gl.useProgram(this.prg),!0)}}class m{constructor(t,s,i){if(null==t)return r(0,0,0);"object"==typeof t?3==t.length?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s||null==i?(this.x=t,this.y=t,this.z=t):(this.x=t,this.y=s,this.z=i)}add(t){return null==t?r(this):"number"==typeof t?r(this.x+t,this.y+t,this.z+t):r(this.x+t.x,this.y+t.y,this.z+t.z)}add3(t,s){return this.add(t.add(s))}add4(t,s,i){return this.add(t.add3(s,i))}sub(t){return null==t?r(this):"number"==typeof t?r(this.x-t,this.y-t,this.z-t):r(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?r(this):"number"==typeof t?r(this.x*t,this.y*t,this.z*t):"object"==typeof t?r(this.x*t[0],this.y*t[1],this.z*t[2]):void 0}div(t){return null==t?r(this):"number"==typeof t?r(this.x/t,this.y/t,this.z/t):"object"==typeof t?r(this.x/t[0],this.y/t[1],this.z/t[2]):void 0}neg(){return r(-this.x,-this.y,-this.z)}dot(t){return null==t?this.dot(this):"number"==typeof t?this.x*t+this.y*t+this.z*t:this.x*t.x+this.y*t.y+this.z*t.z}len(){let t=this.dot();return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.len();return 1==t||0==t?r(this):this.div(t)}cross(t){return null==t?r(this):"number"==typeof t?this.cross(r(t)):r(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}transform(t){return r(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2])}mulMatr(t){let s=this.x*t.m[0][3]+this.y*t.m[1][3]+this.z*t.m[2][3]+t.m[3][3];return r(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0]+t.m[3][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1]+t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2]).div(s)}pointTransform(t){return r(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0]+t.m[3][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1]+t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2])}}function r(...t){return new m(...t)}function n(t){return t*Math.PI/180}class l{constructor(t){null!=t&&null!=t?"object"==typeof t&&4==t.length?this.m=t:this.m=t.m:this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]}determ(){return this.m[0][0]*a(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*a(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+this.m[0][2]*a(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*a(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}mul(t){let s=o();return s.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],s.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],s.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],s.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],s.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],s.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],s.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],s.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],s.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],s.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],s.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],s.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],s.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],s.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],s.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],s.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],o(s)}mul3(t,s){return this.mul(t.mul(s))}mul4(t,s,i){return this.mul(t.mul3(s,i))}mul5(t,s,i,h){return this.mul(t.mul4(s,i,h))}mul6(t,s,i,h,e){return this.mul(t.mul5(s,i,h,e))}inverse(){let t=o(),s=this.determ();return 0==s||(t.m[0][0]=+a(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t.m[1][0]=-a(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t.m[2][0]=+a(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t.m[3][0]=+a(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t.m[0][1]=+a(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t.m[1][1]=-a(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t.m[2][1]=+a(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t.m[3][1]=+a(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t.m[0][2]=+a(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t.m[1][2]=-a(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t.m[2][2]=+a(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t.m[3][2]=+a(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t.m[0][3]=+a(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/s,t.m[1][3]=-a(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/s,t.m[2][3]=+a(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/s,t.m[3][3]=+a(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/s),t}transpose(){return o([[this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0]],[this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1]],[this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2]],[this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3]]])}}function a(t,s,i,h,e,m,r,n,l){return t*e*l+s*m*r+i*h*n-t*m*n-s*h*l-i*e*r}function o(t){return new l(t)}o.rotate=(t,s)=>{let i=n(t),h=Math.sin(i),e=Math.cos(i),m=s.normalize();return o([[e+m.x*m.x*(1-e),m.y*m.x*(1-e)-m.z*h,m.z*m.x*(1-e)+m.y*h,0],[m.x*m.y*(1-e)+m.z*h,e+m.y*m.y*(1-e),m.z*m.y*(1-e)-m.x*h,0],[m.x*m.z*(1-e)-m.y*h,m.y*m.z*(1-e)+m.x*h,e+m.z*m.z*(1-e),0],[0,0,0,1]])},o.rotateX=t=>{let s=n(t),i=Math.sin(s),h=Math.cos(s);return o([[1,0,0,0],[0,h,i,0],[0,-i,h,0],[0,0,0,1]])},o.rotateY=t=>{let s=n(t),i=Math.sin(s),h=Math.cos(s);return o([[h,0,-i,0],[0,1,0,0],[i,0,h,0],[0,0,0,1]])},o.rotateZ=t=>{let s=n(t),i=Math.sin(s),h=Math.cos(s);return o([[h,i,0,0],[-i,h,0,0],[0,0,1,0],[0,0,0,1]])},o.translate=t=>o([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]]),o.scale=t=>o([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]]),o.view=(t,s,i)=>{let h=s.sub(t).normalize(),e=h.cross(i).normalize(),m=e.cross(h).normalize();return o([[e.x,m.x,-h.x,0],[e.y,m.y,-h.y,0],[e.z,m.z,-h.z,0],[-t.dot(e),-t.dot(m),t.dot(h),1]])},o.frustum=(t,s,i,h,e,m)=>o([[2*e/(s-t),0,0,0],[0,2*e/(h-i),0,0],[(s+t)/(s-t),(h+i)/(h-i),-(m+e)/(m-e),-1],[0,0,-2*e*m/(m-e),0]]),o.ortho=(t,s,i,h,e,m)=>o([[2/(s-t),0,0,0],[0,2/(h-i),0,0],[0,0,-2/(m-e),0],[-(s+t)/(s-t),-(h+i)/(h-i),-(m+e)/(m-e),1]]);class d{constructor(t,s,i,h,e){this.projSize=.1,this.projDist=.1,this.farClip=300,this.width=t,this.height=s;let m=this.projSize,r=this.projSize;t<s?m*=t/s:r*=s/t,this.proj=o.frustum(-m/2,m/2,-r/2,r/2,this.projDist,this.farClip),this.setPos(i,h,e)}setPos(t,s,i){this.matView=o.view(t,s,i),this.right=r(this.matView.m[0][0],this.matView.m[1][0],this.matView.m[2][0]),this.up=r(this.matView.m[0][1],this.matView.m[1][1],this.matView.m[2][1]),this.dir=r(-this.matView.m[0][2],-this.matView.m[1][2],-this.matView.m[2][2]),this.loc=t,this.at=s,this.matVP=this.matView.mul(this.proj)}}function u(t){return t*Math.PI/180}class g{loadShader(t,s){const i=this.gl.createShader(t);if(this.gl.shaderSource(i,s),this.gl.compileShader(i),!this.gl.getShaderParameter(i,this.gl.COMPILE_STATUS)){let t=this.gl.getShaderInfoLog(i);console.log("Shader compile fail: "+t)}return i}render(){this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.clear(this.gl.DEPTH_BUFFER_BIT)}constructor(t){let i=t.width,h=t.height;this.timer=new s,this.gl=t.getContext("webgl2"),this.gl.enable(this.gl.DEPTH_TEST),this.gl.clearColor(1,.99,.6,1),this.camera=function(t,s,i,h,e){return new d(t,s,i,h,e)}(i,h,r(5),r(0),r(0,1,0))}}class c{constructor(t,s){this.norm=null==s?r():s,this.pos=t}}class f{_init(t,s,i){let h=[],e=0;this.shd=t,this.verts=s,this.inds=i,this.loaded=!0;let m=function(t,s){let i=t,h=s;for(let t in i)i[t].norm=r();for(let t=0;t<h.length;t+=3){let s=h[t],e=h[t+1],m=h[t+2],r=i[s].pos,n=i[e].pos,l=i[m].pos,a=n.sub(r).cross(l.sub(r)).normalize();i[s].norm=i[s].norm.add(a),i[e].norm=i[e].norm.add(a),i[m].norm=i[m].norm.add(a)}for(let t in i)i[t].norm=i[t].norm.normalize();return{vert:i,inds:h}}(this.verts,this.inds);this.verts=m.vert,this.inds=m.inds;for(let t of s)h[e++]=t.pos.x,h[e++]=t.pos.y,h[e++]=t.pos.z,h[e++]=t.norm.x,h[e++]=t.norm.y,h[e++]=t.norm.z;this.vertexArrayId=t.rnd.gl.createVertexArray(),t.rnd.gl.bindVertexArray(this.vertexArrayId),this.vertexBuffer=t.rnd.gl.createBuffer(),t.rnd.gl.bindBuffer(t.rnd.gl.ARRAY_BUFFER,this.vertexBuffer),t.rnd.gl.bufferData(t.rnd.gl.ARRAY_BUFFER,new Float32Array(h),t.rnd.gl.STATIC_DRAW),null==t.prg&&(this.loaded=!1),null!=t.attrs.InPosition&&null!=t.attrs.InNormal&&(t.rnd.gl.vertexAttribPointer(t.attrs.InPosition.loc,3,t.rnd.gl.FLOAT,!1,24,0),t.rnd.gl.enableVertexAttribArray(t.attrs.InPosition.loc),t.rnd.gl.vertexAttribPointer(t.attrs.InNormal.loc,3,t.rnd.gl.FLOAT,!1,24,12),t.rnd.gl.enableVertexAttribArray(t.attrs.InNormal.loc)),this.IndexBufferId=t.rnd.gl.createBuffer(),t.rnd.gl.bindBuffer(t.rnd.gl.ELEMENT_ARRAY_BUFFER,this.IndexBufferId),t.rnd.gl.bufferData(t.rnd.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(i),t.rnd.gl.STATIC_DRAW),this.numOfElements=i.length,this.world=o()}constructor(t,s,i){this._init(t,s,i)}draw(){null==this.shd.prg||this.loaded||(this._init(this.shd,this.verts,this.inds),this.loaded=!0),this.loaded&&(null!=this.shd.uniformBlocks.Prim&&this.shd.uniformBlocks.Prim.update(0,new Float32Array([].concat(...this.world.mul(this.shd.rnd.camera.matVP).m).concat(...this.world.m))),this.shd.rnd.gl.bindVertexArray(this.vertexArrayId),this.shd.rnd.gl.bindBuffer(this.shd.rnd.gl.ELEMENT_ARRAY_BUFFER,this.IndexBufferId),this.shd.rnd.gl.drawElements(this.shd.rnd.gl.TRIANGLES,this.numOfElements,this.shd.rnd.gl.UNSIGNED_INT,0))}}class p{constructor(t){this.vertexes=[]}setCube(){this.vertexes=[[r(-1,-1,-1),r(-1,1,-1),r(1,1,-1),r(1,-1,-1)],[r(-1,-1,1),r(-1,1,1),r(1,1,1),r(1,-1,1)],[r(-1,-1,-1),r(-1,-1,1),r(-1,1,1),r(-1,1,-1)],[r(1,-1,-1),r(1,-1,1),r(1,1,1),r(1,1,-1)],[r(-1,-1,-1),r(-1,-1,1),r(1,-1,1),r(1,-1,-1)],[r(-1,1,-1),r(-1,1,1),r(1,1,1),r(1,1,-1)]]}setTetra(){let t=Math.sqrt(3),s=r(0,Math.sqrt(2)/t,0).mul(2),i=r(0,0,t/3).mul(2),h=r(-.5,0,-t/6).mul(2),e=r(.5,0,-t/6).mul(2);this.vertexes=[[h,i,s],[i,e,s],[e,h,s],[i,e,h]]}setOcta(){let t=r(0,Math.sqrt(2)/2,0).mul(2),s=t.mul(-1),i=r(-.5,0,.5).mul(2),h=r(-.5,0,-.5).mul(2),e=r(.5,0,.5).mul(2),m=r(.5,0,-.5).mul(2);this.vertexes=[[s,i,e],[s,i,h],[s,h,m],[s,e,m],[t,i,e],[t,i,h],[t,h,m],[t,e,m]]}setIco(){this.vertexes=[];let t=u(72),s=Math.cos(t),i=Math.sin(t),h=Math.cos(2*t),e=Math.sin(2*t),m=r(0,.5+Math.sqrt(1-2*s),0).mul(1.5),n=r(1,.5,0).mul(1.5),l=r(s,.5,-i).mul(1.5),a=r(h,.5,-e).mul(1.5),o=r(h,.5,e).mul(1.5),d=r(s,.5,i).mul(1.5),g=n.mul(-1),c=l.mul(-1),f=a.mul(-1),p=o.mul(-1),y=d.mul(-1),x=m.mul(-1);this.vertexes=[[d,o,m],[o,a,m],[a,l,m],[l,n,m],[n,d,m],[p,n,l],[p,f,n],[f,d,n],[f,c,d],[c,o,d],[c,g,o],[g,a,o],[g,y,a],[y,l,a],[y,p,l],[p,x,f],[f,x,c],[c,x,g],[g,x,y],[y,x,p]]}setDode(){this.vertexes=[];let t=Math.sqrt(50+10*Math.sqrt(5))/10,s=.25*(1+Math.sqrt(5))*Math.sqrt(3),i=2*t*Math.cos(u(36)),h=[],e=[],m=[],n=[],l=Math.sqrt(s*s-t*t),a=Math.sqrt(s*s-i*i);for(let s=0;s<360;s+=72){let o=u(s),d=u(s+36),g=r(t*Math.sin(o),t*Math.cos(o),l),c=r(t*Math.sin(d),t*Math.cos(d),-l),f=r(i*Math.sin(o),i*Math.cos(o),a),p=r(i*Math.sin(d),i*Math.cos(d),-a);h.push(g),e.push(c),m.push(f),n.push(p)}this.vertexes.push(h),this.vertexes.push(e);for(let t=0;t<5;t++){let s=[h[t],m[t],n[t],m[(t+1)%5],h[(t+1)%5]],i=[e[t],n[t],m[t],n[(t+4)%5],e[(t+4)%5]];this.vertexes.push(s),this.vertexes.push(i)}}setD10(){let t=u(72),s=Math.cos(t),i=Math.sin(t),h=Math.cos(2*t),e=Math.sin(2*t),m=r(0,.5,0),n=r(.5,.05,0),l=r(.5*s,.05,.5*i),a=r(.5*h,.05,.5*e),o=r(.5*h,.05,.5*-e),d=r(.5*s,.05,-.5*i),g=n.mul(-1),c=l.mul(-1),f=a.mul(-1),p=o.mul(-1),y=d.mul(-1),x=m.mul(-1);this.vertexes=[[m,n,l],[m,l,a],[m,a,o],[m,o,d],[m,d,n],[n,p,l],[l,y,a],[a,g,o],[o,c,d],[d,f,n],[c,d,f],[f,n,p],[p,l,y],[y,a,g],[g,o,c],[c,x,f],[f,x,p],[p,x,y],[y,x,g],[g,x,c]]}makePrim(t){let s=[],i=[],h=0;for(let t of this.vertexes){for(let s of t)i.push((e=s,m=r(),new c(e,m)));for(let i=2;i<t.length;i++)s.push(h),s.push(h+i-1),s.push(h+i);h+=t.length}var e,m;return function(t,s,i){return new f(t,s,i)}(t,i,s)}}let y,x,z,M,T;const v=()=>{z.responce(),y.render();const t=new Date;let s=60*t.getMinutes()+t.getSeconds()+t.getMilliseconds()/1e3;x.world=o.rotate(60*s,r(-10,14,20)).mul(o.translate(r(0,Math.sin(4*s),0))),M.apply(),x.draw(y),window.requestAnimationFrame(v)};function S(){var t;t=document.getElementById("figure"),y=new g(t),z=new s,z.responce(),T=new p,T.setD10(),M=function(t,s){return new e(t,s)}(y,"default"),x=T.makePrim(M),v()}class F{constructor(t,s,i){this.data={type:t,author:s,text:i}}}function I(t,s,i){return new F(t,s,i)}let b,A,E,w;function B(){w=new WebSocket("ws://localhost:8000"),w.onopen=()=>{console.log("open")},w.onmessage=t=>{!function(t){let s=JSON.parse(t);if("type"==s.type)document.getElementById("printing"),$("#printing").text(s.text),""==s.text&&$("printing").text(" ");else if("file"==s.type);else{let t=`<tr><td class='msg'>${s.text}</td></tr>`;"send"!=s.type||""!=E.value&&E.value==s.author||(t=`<tr><td class='ot_msg'>[${s.author}]: ${s.text}</td></tr>`),A.insertAdjacentHTML("beforeend",t)}}(t.data)}}return window.addEventListener("load",(()=>{document.getElementById("btn"),b=document.getElementById("msg"),A=document.getElementById("messager"),E=document.getElementById("userName"),document.getElementById("sendFile").addEventListener("change",(async t=>{if(window.jQuery){let t=new FormData;null!=$("#sendFile").val()&&t.append("myFile",$("#sendFile").val()),$.ajax({type:"POST",url:"/sendFile",data:t,processData:!1,contentType:!1,success:()=>{alert("success")}}).done((()=>{w.send(JSON.stringify(I("sendFile",""!=E.value?E.value:"",$("#sendFile")[0].files[0].name).data))}))}})),S(),B()})),t.buttonClick=function(){if(""!=b.value&&""!=E.value){let t=I("send",E.value,b.value);E.readOnly=!0,b.value="",w.send(JSON.stringify(t.data)),w.send(JSON.stringify(I("end-type",E.value,"").data))}},t.textChange=function(){""!=E.value&&(""!=b.value?w.send(JSON.stringify(I("type",E.value,"").data)):w.send(JSON.stringify(I("end-type",E.value,"").data)))},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
